defmodule Pathfinder.Protocol.Thrift.Header do
  require Record
  @moduledoc """
    Must be *imported* to use structures generated by thrift compiler
  """

  @type t :: record
  @typep record :: tuple

  Enum.each(
    Record.extract_all(from_lib: "pathfinder_proto/include/pathfinder_proto_lookup_thrift.hrl"),
    fn {name, definition} ->
      Record.defrecord(name, definition)
    end
  )
end

defprotocol Pathfinder.Protocol.Thrift do
  @moduledoc "Encodes data to a thrift record"
  @fallback_to_any true
  def encode(data)
end

defimpl Pathfinder.Protocol.Thrift, for: NaiveDateTime do

  @spec encode(%NaiveDateTime{}) :: binary
  def encode(naive_dt) do
    NaiveDateTime.to_string(naive_dt)
  end
end

defimpl Pathfinder.Protocol.Thrift, for: Atom do

  @spec encode(atom) :: atom
  def encode(nil), do: :undefined
  def encode(atom), do: atom
end

defimpl Pathfinder.Protocol.Thrift, for: Any do

  @spec encode(any) :: any
  def encode(any), do: any
end
